{"version":3,"file":"factorise.js","sourceRoot":"","sources":["factorise.ts"],"names":[],"mappings":";;AAGA,MAAM,SAAS;IASX;QANQ,cAAS,GAAQ,EAAE,CAAC;QACpB,cAAS,GAAe,EAAE,CAAC;QAE3B,aAAQ,GAAQ,EAAE,CAAC;QACnB,aAAQ,GAAQ,EAAE,CAAC;IAEJ,CAAC;IAEjB,MAAM,KAAK,QAAQ;QACtB,OAAO,IAAI,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,IAAI,EAAE,CAAC,CAAC;IACzD,CAAC;IAEM,eAAe,CAAC,OAAgB;QACnC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC;IACzC,CAAC;IAEM,iBAAiB,CAAC,OAAgB;QACrC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC;IACtC,CAAC;IAEM,gBAAgB,CAAC,QAAkB;QACtC,IAAI,CAAC,SAAS,GAAG,CAAC,GAAG,IAAI,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;IACnD,CAAC;IAEM,kBAAkB,CAAC,QAAkB;QACxC,IAAI,CAAC,SAAS,GAAG,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC;IACvE,CAAC;IAEM,KAAK,CAAC,OAAO,CAAC,SAAiB,EAAE,OAAY;QAChD,MAAM,MAAM,GAAQ,MAAM,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,EAAE,mBAAM,IAAI,CAAC,QAAQ,GAAI,OAAO,CAAC,CAAC;QACtF,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;QAC9B,IAAI,CAAC,QAAQ,qBAAQ,MAAM,CAAE,CAAC;QAC9B,IAAI,CAAC,eAAe,EAAE,CAAC;IAC3B,CAAC;IAEO,eAAe;QACnB,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ;aACxC,WAAW,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;IAClF,CAAC;CACJ;AAEY,QAAA,SAAS,GAAG,SAAS,CAAC,QAAQ,CAAC","sourcesContent":["import { Factory } from \"./factory\";\nimport { Observer } from \"./observer\";\n\nclass Factorise {\n    private static INSTANCE: Factorise;\n\n    private factories: any = {};\n    private observers: Observer[] = [];\n\n    private oldState: any = {};\n    private newState: any = {};\n\n    private constructor() {}\n\n    public static get instance() {\n        return this.INSTANCE || (this.INSTANCE = new this());\n    }\n\n    public registerFactory(factory: Factory) {\n        this.factories[factory.id] = factory;\n    }\n\n    public unregisterFactory(factory: Factory) {\n        this.factories[factory.id] = null;\n    }\n\n    public registerObserver(observer: Observer) {\n        this.observers = [...this.observers, observer];\n    }\n\n    public unregisterObserver(observer: Observer) {\n        this.observers = [...this.observers.filter((o) => o !== observer)];\n    }\n\n    public async execute(factoryId: string, payload: any) {\n        const result: any = await this.factories[factoryId].do({ ...this.newState }, payload);\n        this.oldState = this.newState;\n        this.newState = { ...result };\n        this.notifyObservers();\n    }\n\n    private notifyObservers() {\n        this.observers.forEach((observer) => observer\n            .stateUpdate(Object.freeze(this.newState), Object.freeze(this.oldState)));\n    }\n}\n\nexport const factorise = Factorise.instance;\n"]}