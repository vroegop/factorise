{"version":3,"file":"observer.js","sourceRoot":"","sources":["observer.ts"],"names":[],"mappings":";;AAAA,2CAAwC;AAExC,MAAa,QAAQ;IAArB;QACW,aAAQ,GAAQ,EAAE,CAAC;QACnB,aAAQ,GAAQ,EAAE,CAAC;IA0B9B,CAAC;IAxBU,QAAQ;QACX,qBAAS,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;IACrC,CAAC;IAED;;;;;;;OAOG;IACI,WAAW,CAAC,QAAa,EAAE,QAAa;QAC3C,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC7B,CAAC;IAEM,iBAAiB,CAAC,OAAoB,EAAE,KAAa,EAAE,OAAe;QACzE,OAAO,CAAC,gBAAgB,CAAC,KAAK,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,qBAAS,CAAC,OAAO,CAAC,OAAO,EAAG,CAAiB,CAAC,MAAM,CAAC,CAAC,CAAC;IAClG,CAAC;IAEM,cAAc,CAAC,OAAe,EAAE,OAAY;QAC/C,qBAAS,CAAC,OAAO,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;IACxC,CAAC;CACJ;AA5BD,4BA4BC","sourcesContent":["import { factorise } from \"./factorise\";\n\nexport class Observer {\n    public newState: any = {};\n    public oldState: any = {};\n\n    public register() {\n        factorise.registerObserver(this);\n    }\n\n    /**\n     * This function is an example of the stateUpdate function.\n     * You can copy-paste this into your code if you extend the observer to implement updates.\n     * Not overriding sets newState and oldState as properties.\n     * That means that in Polymer for example, they are bound to the property.\n     * @param newState the new state object\n     * @param oldState the old state object\n     */\n    public stateUpdate(newState: any, oldState: any) {\n        this.newState = newState;\n        this.oldState = oldState;\n    }\n\n    public mapEventToFactory(element: HTMLElement, event: string, factory: string) {\n        element.addEventListener(event, (e) => factorise.execute(factory, (e as CustomEvent).detail));\n    }\n\n    public executeFactory(factory: string, payload: any) {\n        factorise.execute(factory, payload);\n    }\n}\n"]}